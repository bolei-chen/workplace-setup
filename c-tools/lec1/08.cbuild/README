- here we have a new idea of mine (2020): analyse C source files like mfbuild
  does, but DON'T write a Makefile: "be make" as well, i.e. analyse the
  dependencies live, build internal make-style rules, and run them.

- NEW for June 2022 (i.e. just too late for C Tools 2022 course, dammit) I've
  given it the Holy Grail of nested include support, for the first time ever.
  So now, even if you insist on putting includes of .h files INSIDE .h files,
  this tool should now work properly - and hopefully without ever getting
  stuck in a loop.

- NEW for June 2022: I've added "--directincludes" and "--allincludes" flags
  to CB, to get it to tell us the result of the #include search (direct
  includes) and the #include search + flattening (allincludes).  The output
  is a list of edge pairs (from, to) and may be graphed via the quick hack
  Perl script graphpairs [most of the various .dot files and .ps files in
  this directory have been generated by this script].

- NEW for Dec 2022: I've added a companion tool "cr" that compiles, links
  and then runs a C program.

- first CB identifies all .c and .h files in the current directory,
  determines which in-directory .h files each .c and .h file includes,
  directly (where a .c file directly includes a .h file) or indirectly (where
  a .c file includes A.h and A.h includes B.h and B.h includes... i.e. nested
  includes - .h files with guards including other .h files).

- it assumes the normal C modular convention that if fred.h is included into
  something, and fred.c also exists, then it is not a coincidence that fred.h
  and fred.c both exist: they form a single 2-part module called fred (and btw
  normally fred.c should directly include fred.h as well).  Hence if anyone
  includes fred.h, fred.o will need to be linked with the corresponding
  main program, and so on.

- let's call this tool <<cbuild>> or, in abbreviated form, <<cb>>


Installation notes:

- cb (and it's helper modules Rules.pm and FindIncludes.pm) is written using
  standard Perl 5 syntax and modules.  "make install" will install them (and a
  man page) into your C-Tools directory.  This should run on any version of
  Perl 5 as far as I know (please tell me if it doesn't).

- EXPERIMENTAL: As another option, I've added a binary packaged version of
  cb (an ELF executable that includes the Perl interpreter, cb and Rules.pm all
  bundled together using the "Perl packer" tool pp), you'll find this in the
  packaging-cbuild directory.  You could use choose to install that version,
  if for example, you didn't have a Perl installation at all, by:

     cd 08.cbuild
     mv cb cb.perl
     cp packaging-cbuild/packedcb cb
     make install
